from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import token
from logging import basicConfig, INFO
import sqlite3
from datetime import datetime

bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
basicConfig(level=INFO)

class OrderFoodState(StatesGroup):
    name = State()
    title = State()
    phone_number = State()
    address = State()

connect = sqlite3.connect('ojak_kebap.db')
cursor = connect.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username VARCHAR(100),
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        date_joined DATETIME
);''')

connect.commit()
cursor.execute(''' CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(100),
        title TEXT,
        phone_number VARCHAR(100),
        address VARCHAR(100)
);''')
connect.commit()



start_buttons = [
    types.KeyboardButton('–û –Ω–∞—Å'),
    types.KeyboardButton('–ú–µ–Ω—é'),
    types.KeyboardButton('–ê–¥—Ä–µ—Å'),
    types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É'),
]
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_buttons)


@dp.message_handler(commands='start')
async def start(message:types.Message):
    cursor=connect.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = {message.from_user.id};")
    res = cursor.fetchall()
    if not res:
        cursor.execute(f"""INSERT INTO users (id, username, first_name, last_name, date_joined) VALUES (
            {message.from_user.id},
            '{message.from_user.first_name}',
            '{message.from_user.last_name}',
            '{message.from_user.username}',
            '{datetime.now()}'
);""")
        
        cursor.connection.commit()
@dp.message_handler(text='–ú–µ–Ω—é')
async def manu(message:types.Message):
    await message.answer("–®–∞—à–ª—ã–∫–∏'üñá\nhttps://nambafood.kg/ojak-kebap", reply_markup=start_keyboard)


@dp.message_handler(text='–û –Ω–∞—Å')
async def about(message:types.Message):
    await message.answer('''–ö–∞—Ñ–µ "–û–∂–∞–∫ –ö–µ–±–∞–ø" –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 18 –ª–µ—Ç —Ä–∞–¥—É–µ—Ç —Å–≤–æ–∏—Ö –≥–æ—Å—Ç–µ–π —Å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–µ—Ü–∫–∏–º–∏ –±–ª—é–¥–∞–º–∏ –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–≤–æ–∏–º –∫–µ–±–∞–±–æ–º.

–ù–∞—à–µ –∫–∞—Ñ–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–Ω–æ–≥–∏—Ö –∫–∞—Ñ–µ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.

–í 2016 –≥–æ–¥—É –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –Ω–∞ —Å–∞–π—Ç–µ "Horeca" –±—ã–ª–∏ —É–¥–æ—Å—Ç–æ–µ–Ω—ã "–õ—É—á—à–µ–µ –∫–∞—Ñ–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å" –∏ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø—Ä–∞–≤–¥–∞—Ç—å –¥–æ–≤–µ—Ä–∏–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π.

–ú—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã, —É—Å–∏–ª–∏—Ç–µ–ª–∏ –≤–∫—É—Å–∞, –∫—Ä–∞—Å–∏—Ç–µ–ª–∏, –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã, —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ –∂–∏—Ä—ã, –≤—Ä–µ–¥–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π ¬´–ï¬ª. –£ –Ω–∞—Å —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: –Ω–∞—à–∏ —Ñ–∏–ª–∏–∞–ª—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–æ—Ä–º –ö—ã—Ä–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –∏ —Å–∞–Ω—ç–ø–∏–¥–µ–º—Å—Ç–∞–Ω—Ü–∏–∏. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—è—Å–Ω—É—é –∏ —Ä—ã–±–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –æ—Ç –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤''')


@dp.message_handler(text = '–ê–¥—Ä–µ—Å')
async def address(message: types.Message):
    await message.answer(" –ê–¥—Ä–µ—Å:  234ÿå 246 –ö—É—Ä–º–∞–Ω–∂–∞–Ω-–î–∞—Ç–∫–∞ —É–ª., –û—à")
   


@dp.message_handler(text='–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É')
async def about(message:types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
    await OrderFoodState.name.set()


@dp.message_handler(state=OrderFoodState.name)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
    await OrderFoodState.next()

@dp.message_handler(state=OrderFoodState.title)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    await OrderFoodState.next()
    
@dp.message_handler(state=OrderFoodState.phone_number)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:")
    await OrderFoodState.next()


@dp.message_handler(state=OrderFoodState.address)
async def process_food_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text

    async with state.proxy() as data:
        name = data['name']
        title = data['title']
        phone_number = data['phone_number']
        address = data['address']

    cursor.execute('''
        INSERT INTO orders (name, title, phone_number, address )
        VALUES (?, ?, ?, ?)
    ''', (name, title, phone_number, address))
    connect.commit()

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç—å.")


executor.start_polling(dp)

    
         






